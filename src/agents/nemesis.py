import random
import time
from typing import Dict
from src.agents.base_agent import BaseAgent
from src.models.board import Board
from src.utils.const import Soldier
from copy import deepcopy



#Transforme l'action pour les fichiers json puissent lire
def compact_move(mouv)->list:
    mouv_compact=[0,1,'a','a']
    if mouv['type']=='CAPTURE_SOLDIER':
        mouv_compact[0]=1
        mouv_compact.append(mouv['captured_soldier'])
    if mouv['soldier_value']==Soldier.BLUE:
        mouv_compact[1]=2
    mouv_compact[2]=mouv['from_pos']
    mouv_compact[3]=mouv['to_pos']
    
    return mouv_compact
    
#chemin inverse
def decompact_move(mouv_compact:str)->list:
    mouv={'type': 'MOVE_SOLDIER', 'soldier_value': Soldier.RED, 'from_pos': 'f2', 'to_pos': 'e1'}
    if mouv_compact[0]==1:
        mouv['type']='CAPTURE_SOLDIER'
        mouv['captured_soldier']=mouv_compact[4]
    if mouv_compact[1]==2:
        mouv['soldier_value']=Soldier.BLUE
    mouv['from_pos']=mouv_compact[2]
    mouv['to_pos']=mouv_compact[3]
    
    return mouv





class Agent(BaseAgent):
    """AI agent that plays random valid moves"""
    
    def __init__(self, soldier_value: Soldier, data: Dict = None):
        super().__init__(soldier_value, data)
        self.name = "Némésis"
        self.time=0.5  #Temps dont dispose mon ia
        if self.soldier_value==Soldier.BLUE:
            self.soldier_value_advers=Soldier.RED
        else :
            self.soldier_value_advers=Soldier.BLUE
        
        self.mouvement_repete={}
        #self.defense_mode=False


       
    
    
    def choose_action(self, board: Board) -> Dict:
        """
        Choose a random action from valid moves.
        Args: 
            board: Current game board state
        Returns:
            Randomly chosen valid action for the soldier_value
        """
        start_time=time.perf_counter() 

        #Pour eviter de perdre du temps implementer une strategie plus rapide 
        if self.time<=0.2:
            #print('time finish')
            None


        #MOde défense pas encore pret
        '''
        if board.count_soldiers(self.soldier_value)>board.count_soldiers(self.soldier_value_advers):
            self.defense_mode=True
        if self.defense_mode:
            None
            '''
            


        #Transformation de l'état en clé
        etat_jeu=board.soldiers
        valid_actions = board.get_valid_actions()

        #Transformation de l'état du jeu en clé 
        positions = [Soldier.EMPTY,Soldier.RED, Soldier.BLUE]
        etat_numerique = [positions.index(etat_jeu[pos]) for pos in sorted(etat_jeu.keys())]
        board_key= "".join(map(str, etat_numerique))
        donnée_RED={"1111111111111111000002222222222222222": [0, 1, "d2", "e1"], "1111111111110111102002220222222222222": [0, 1, "c2", "d2"], "1111111011111111100002222222222222222": [0, 1, "d4", "e5"], "1111111011111101102012022222222222222": [0, 1, "c4", "d4"], "1111111010111111102010222222222222222": [0, 1, "d2", "c2"], "1111111110110111120010222222222222222": [1, 1, "e1", "e3", "e2"], "1111111110112111000010220222222222222": [1, 1, "c3", "e1", "d2"], "1111111100110111100010202222222222222": [0, 1, "b2", "c3"], "1110111110110111100012002222222222222": [0, 1, "c1", "d2"], "1110110110111111100010202222222222222": [0, 1, "c2", "c1"], "1110111010111111100010022222222222222": [0, 1, "c3", "c2"], "1110111100111111100010202222222222222": [0, 1, "b3", "c3"], "1110011110111111100010022222222222222": [0, 1, "c3", "c4"], "1110011101111111100010202222222222222": [0, 1, "b4", "c3"], "1110001111111111100010022222222222222": [0, 1, "d2", "e2"], "1110001111110111110010202222222222222": [0, 1, "c1", "d2"], "1110000111111111110010022222222222222": [0, 1, "c2", "c1"], "1110001011111111110010202222222222222": [0, 1, "c3", "c2"], "1110001101111111110010022222222222222": [0, 1, "c4", "c3"], "1110001110111111110010202222222222222": [0, 1, "c5", "c4"], "1110001111011111110010022222222222222": [0, 1, "d4", "e3"], "1110001111011101111010202222222222222": [0, 1, "c3", "d4"], "1110001101011111111010022222222222222": [0, 1, "c2", "c3"], "1110001011011111111010202222222222222": [0, 1, "c1", "c2"], "1110000111011111111012002222222222222": [0, 1, "c4", "c5"], "1110000110111111111010202222222222222": [0, 1, "c3", "c4"], "1110000101111111111010022222222222222": [0, 1, "d1", "c1"], "1110001101101111111010202222222222222": [0, 1, "c2", "c3"], "1110001011101111111012002222222222222": [0, 1, "e1", "d1"], "1110001011111111011010202222222222222": [0, 1, "c1", "c2"], "1110000111111111011012002222222222222": [0, 1, "e2", "e1"], "1110000111111111101010202222222222222": [0, 1, "d1", "c1"], "1110001111101111101012002222222222222": [0, 1, "e3", "e2"], "1110001111121111010010002222222222222": [1, 1, "c1", "e1", "d1"], "1110000111101111110010202202222222222": [0, 1, "d3", "e3"], "1110000111101011111010022202222222222": [0, 1, "c3", "d3"], "1110000101101111111010022220222222222": [0, 1, "c2", "c1"], "1110001001101111111010022202222222222": [0, 1, "c1", "d1"], "1110000001111111111010022220222222222": [0, 1, "c4", "c3"], "1110000010111111111010022202222222222": [0, 1, "c3", "c2"], "1110000100111111111010022220222222222": [0, 1, "c5", "c4"], "1110000101011111111010022202222222222": [0, 1, "c2", "c1"], "1110001001011111111010022220222222222": [0, 1, "d4", "c3"], "1110001011011101111210020220222222222": [0, 1, "e3", "f4"], "1110001011011101112210020220220222222": [1, 1, "d2", "f4", "e3"], "1110001011010101110210021220220222222": [1, 1, "f4", "d4", "e4"], "1110001011010111110010020220202222222": [0, 1, "c1", "d2"], "1110000011011111110010002220202222222": [0, 1, "c3", "c2"], "1110000101011111110010020220202222222": [0, 1, "c2", "c1"], "1110001001011111110010002220202222222": [0, 1, "c4", "c3"], "1110001010011111110010020220202222222": [0, 1, "c1", "c2"], "1110001110010111110010002220202222222": [0, 1, "c1", "d2"], "1110000110011111110010020220202222222": [0, 1, "d1", "c1"], "1110001110001111110010002220202222222": [0, 1, "d2", "d1"], "1110001110010111110010020220202222222": [0, 1, "c3", "d2"], "1110001100011111110010002220202222222": [0, 1, "c2", "c3"], "1111111111110111120002022222222222222": [1, 1, "e1", "e3", "e2"], "1111111111112111000002020222222222222": [1, 1, "c3", "e1", "d2"], "1111111111110111102002022222222222222": [1, 1, "d4", "f2", "e3"], "1111111111110101102002022202222222222": [1, 1, "e1", "g1", "f1"], "1111111111112101000000022212222222222": [1, 1, "c2", "e2", "d2"], "1111111011110101010020022012222222222": [0, 1, "c1", "d2"], "1111110011111121010000022012222222222": [1, 1, "c3", "e5", "d4"], "1111111111110111100022220222222222222": [0, 1, "c1", "d2"], "1111110111111111100022222222220222222": [0, 1, "c2", "c1"], "1111111011111111100022222222202222222": [0, 1, "d2", "c2"], "1111111111110111102022220222202222222": [0, 1, "d4", "e4"], "1111111111110101122122020222202222222": [0, 1, "d1", "d2"], "1111111111101121122102020222202222222": [1, 1, "c3", "e5", "d4"], "1111111101101121120112020222202222222": [0, 1, "b2", "c3"], "1110111111101121102112020222202222222": [1, 1, "d2", "f4", "e3"], "1110111111100121100112021222202222222": [1, 1, "f4", "f2", "f3"], "1110111111100101100012102222202222222": [0, 1, "f2", "e2"], "1110111111100101112012000222202222222": [1, 1, "e2", "e4", "e3"], "1110111111100101100110200222202222222": [0, 1, "a1", "b2"], "0111111111100101120110000222202222222": [1, 1, "e1", "e3", "e2"], "0111111111100101001112000202202222222": [0, 1, "e3", "d4"], "0111111111100111200110000202202222222": [0, 1, "a3", "a1"], "1011111111100111020110000202202222222": [0, 1, "a1", "a3"], "1111111110112111100010222222222222222": [0, 1, "e1", "e2"], "1111111110110111210010222222222222222": [0, 1, "e2", "d2"], "1111111110111111020010222222222222222": [0, 1, "d4", "e4"], "1111111110111101020112222202222222222": [0, 1, "d1", "e1"], "1111111110101101102112222202222222222": [1, 1, "e1", "g1", "f1"], "1111111110101121002010220212222222222": [0, 1, "c5", "c4"], "1111111111201101002010220212222222222": [1, 1, "d2", "f4", "e3"], "1111111111200101002010220212220222222": [0, 1, "c2", "d2"], "1111111011201121000010220212220222222": [1, 1, "c4", "e4", "d4"], "1111111012001101000110220212220222222": [1, 1, "c3", "c5", "c4"], "1111111000101101200110020212220222222": [0, 1, "d2", "d1"], "1111111000112101000110020212220222222": [1, 1, "c1", "e3", "d2"], "1111110000110101001110020212202222222": [0, 1, "e3", "d4"], "1111110000110111002110000212202222222": [1, 1, "e4", "e2", "e3"], "1111110000110111010010200212002222222": [1, 1, "g1", "g3", "g2"], "1111110000110111010010200200102222222": [1, 1, "g3", "e1", "f2"], "1111110000110111110010000200202220222": [0, 1, "e2", "d2"], "1111110000111111100010020200002220222": [0, 1, "d2", "c1"], "1111111000110111100010000200202220222": [0, 1, "d4", "c4"], "1111111001110101100010020200002220222": [0, 1, "d3", "d4"], "1111111001110011100010000200202220222": [0, 1, "b3", "c3"], "1111011011110011100010020200002220222": [0, 1, "c3", "c2"], "1111011101110011100010000200202220222": [0, 1, "a3", "b3"], "1011111101110011100010020200002220222": [0, 1, "b3", "c3"], "1011011111110011100010000200202220222": [0, 1, "b4", "b3"], "1011101111110011100010020200002220222": [0, 1, "a5", "b4"], "1001111111110011100010000200202220222": [0, 1, "a1", "a3"], "0101111111110011100010020200002220222": [0, 1, "a3", "a1"]}
        donnée_Blue={"1111111111110111100002222222222222222": [0, 2, "f4", "e5"], "1111110111111111100022220222222222222": [0, 2, "g5", "f4"], "1111111111110111100022222222220222222": [0, 2, "g4", "g5"], "1111111111111111000022222222202222222": [0, 2, "f2", "e1"], "1111111111111101201022022222202222222": [0, 2, "g2", "f2"], "1111111110111111201022222220202222222": [0, 2, "f4", "g4"], "1111111110111111210022220220222222222": [1, 2, "e1", "e3", "e2"], "1111111110110111000022221220222222222": [1, 2, "g4", "e4", "f4"], "1111111110110111000222220220202222222": [1, 2, "e4", "c4", "d4"], "1111111112111001000022220220202222222": [0, 2, "g5", "f4"], "1111111112110101000022222220200222222": [0, 2, "g3", "g4"], "1111110112111101000022222220020222222": [0, 2, "h4", "g3"], "1111110112110101100022222220220220222": [0, 2, "f4", "e3"], "1111110112111001102022220220220220222": [1, 2, "e3", "c1", "d2"], "1111111011111111100022222222220222222": [0, 2, "g4", "g5"], "1111110111111111100022222222202222222": [0, 2, "f4", "g4"], "1111111011111111100022220222222222222": [0, 2, "f3", "f4"], "1111110111111111100022202222222222222": [0, 2, "f4", "e4"], "1111110111111101100022201222222222222": [1, 2, "g5", "e3", "f4"], "1111110111111101102022200222220222222": [1, 2, "e3", "c1", "d2"], "1111112111110011100022200222220222222": [0, 2, "f2", "f3"], "1111112111110101100022020222220222222": [0, 2, "g4", "g5"], "1111112111110011100022020222202222222": [0, 2, "g5", "f4"], "1111112111110101100022022222200222222": [0, 2, "g3", "g4"], "1111112111110011100022022222020222222": [0, 2, "h4", "g3"], "1111112111110101100022022222220220222": [0, 2, "g2", "f2"], "1111112111110011100022222220220220222": [0, 2, "g4", "g5"], "1111112111110101100022222220202220222": [0, 2, "f4", "g4"], "1111112111110011100022220220222220222": [0, 2, "g5", "f4"], "1111112111110101100022222220220220222": [0, 2, "f4", "e4"], "1111112111110011100222220220220220222": [0, 2, "f3", "f4"], "1111112111110101100222202220220220222": [0, 2, "g4", "g5"], "1111112111110011100222202220202220222": [0, 2, "f2", "g2"], "1111112111110101100222002222202220222": [0, 2, "g3", "g4"], "1111112111110011100222002222022220222": [0, 2, "h3", "g3"], "1111112111110101100222002222222200222": [0, 2, "e4", "d4"], "1111112110110101100122002222222200222": [1, 2, "f4", "d4", "e4"], "1111112110110121100022000222222200222": [1, 2, "d4", "d2", "d3"], "1111112110100101100022000222222200222": [1, 2, "f1", "d1", "e1"], "1111112110120011000020000222222200222": [0, 2, "g5", "f4"], "1111112111120001000020002222220200222": [0, 2, "g4", "g5"], "1111112110120011000020002222202200222": [0, 2, "g3", "g4"], "1111112111120001000020002222022200222": [0, 2, "h2", "g3"], "1111112110120011000020002222222000222": [0, 2, "g3", "f3"], "1111112111120001000020022222022000222": [0, 2, "g2", "g3"], "1111112110120011000020022220222000222": [0, 2, "g3", "f2"], "1111112111120001000020222220022000222": [0, 2, "g4", "g3"], "1111112110120011000020222220202000222": [0, 2, "g5", "g4"], "1111112111120001000020222220220000222": [0, 2, "g3", "g2"], "1111112110120011000020222202220000222": [0, 2, "f4", "g5"], "1111112111120001000020220202222000222": [0, 2, "g4", "f4"], "1111112110120011000020222202202000222": [0, 2, "g3", "g4"], "1111112111120001000020222202022000222": [0, 2, "g2", "g3"], "1111112110120011000020222200222000222": [0, 2, "f2", "g2"], "1111112111120001000020022202222000222": [0, 2, "g3", "f2"], "1111112110120011000020222202022000222": [0, 2, "g2", "g1"], "1111112110120011000020222222020000222": [0, 2, "g1", "f1"], "1111112111120001000022222202020000222": [0, 2, "g2", "g1"]}
        
        #jeu 1
        
        if self.soldier_value==Soldier.BLUE:
            if board_key in donnée_Blue:
                temps_écoulé=time.perf_counter()-start_time
                self.time-=temps_écoulé
                return decompact_move (donnée_Blue[board_key])
        else:
            if board_key in donnée_RED:
                temps_écoulé=time.perf_counter()-start_time
                self.time-=temps_écoulé
                return decompact_move(donnée_RED[board_key])



        #Repete

        if board_key in self.mouvement_repete:
            #print("je répète les mmouv yaaaaa")
            temps_écoulé=time.perf_counter()-start_time
            self.time-=temps_écoulé
            return decompact_move(self.mouvement_repete[board_key])

        #jeu 2
        c=len(valid_actions)
        li=[0] * c
        cont=0
        
        for i in valid_actions:
            board_copy=deepcopy(board)
            if i['type']=='CAPTURE_SOLDIER':
                li[cont]+=100 
               
                board_copy.capture_soldier(i)
                valid_actions_advers=board_copy.get_valid_actions()
                #Me permet de voir si j'ai une capture multiple PS:il y'a un souci avec checkmultiplecapture du board 
                #Limite potentielles je ne sais pas qui a plus de capture 
                if len(valid_actions_advers)!=0:
                    if valid_actions_advers[0]['soldier_value']==self.soldier_value:
                        #print('true')
                        #print(self.soldier_value)
                        li[cont]+=50
            else:
                board_copy.move_soldier(i)
                valid_actions_advers=board_copy.get_valid_actions()
            #Me permet de pénaliser uniquement une fois les mouvements de capture de l'adversaire      
            capture=False
            for action in valid_actions_advers:
                
                if action.get('type') == 'CAPTURE_SOLDIER' and action.get('soldier_value')!=self.soldier_value :
                        if capture==False:
                            li[cont]-=50
                            capture=True
                        #Juste pour voir si l'adversaire a un capture multiple
                        board_cp=deepcopy(board_copy)
                        board_cp.capture_soldier(action)
                        if len(board_cp.get_valid_actions())!=0:
                            if board_cp.get_valid_actions()[0]['soldier_value']==self.soldier_value_advers:
                                li[cont]-=250
                                break

            cont+=1 


        t=0
        for i in li:
            if i==max(li):
                u=valid_actions[t]
                break
            t=t+1
        #print(li)
        #print(u)
        temps_écoulé=time.perf_counter()-start_time
        self.time-=temps_écoulé
        self.mouvement_repete[board_key]=compact_move(u)
        return u
        
    
